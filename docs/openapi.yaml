openapi: 3.0.3
info:
  title: Storyblok Voice Assistant API
  description: |
    Voice-enabled content discovery for Storyblok using AWS Bedrock and natural conversation.
    
    ## Features
    - Natural language conversation with Claude AI
    - Semantic content search via Storyblok Strata
    - Multi-turn conversation support
    - Accessible voice and text interfaces
    
    ## Base URL
    - Development: `http://localhost:8000`
    
  version: 1.0.0
  contact:
    name: Storyblok Voice Assistant
  license:
    name: Hackathon Project

servers:
  - url: http://localhost:8000
    description: Development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Conversation
    description: Main conversation and search endpoints
  - name: Debug
    description: Debug and testing endpoints (DEBUG mode only)

paths:
  /:
    get:
      tags:
        - Health
      summary: Root endpoint
      description: Returns basic service information and health status
      operationId: root
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
              example:
                status: healthy
                service: Storyblok Voice Assistant
                version: 1.0.0

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Dedicated health check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /api/conversation:
    post:
      tags:
        - Conversation
      summary: Process conversation message
      description: |
        Main conversation endpoint that processes user messages, interacts with Claude AI,
        and performs Storyblok content searches when needed.
        
        The endpoint maintains conversation context through the conversation_history parameter,
        enabling multi-turn conversations and iterative search refinement.
      operationId: conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationRequest'
            examples:
              simpleSearch:
                summary: Simple search query
                value:
                  message: "Find articles about marketing"
                  conversation_history: []
              withHistory:
                summary: Refined search with history
                value:
                  message: "Show only recent ones"
                  conversation_history:
                    - role: user
                      content: "Find blog posts about technology"
                    - role: assistant
                      content: "I found 23 technology blog posts."
              casualChat:
                summary: Casual conversation
                value:
                  message: "Hello"
                  conversation_history: []
      responses:
        '200':
          description: Successful conversation response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationResponse'
              examples:
                withResults:
                  summary: Response with search results
                  value:
                    message: "I found 15 marketing articles. Here are the top results:"
                    results:
                      stories:
                        - id: 12345
                          name: "Marketing Strategy 2025"
                          full_slug: "blog/marketing-strategy-2025"
                          title: "Marketing Strategy 2025"
                          description: "A comprehensive guide to modern marketing tactics"
                          published_at: "2025-01-15T10:00:00Z"
                        - id: 12346
                          name: "Social Media Best Practices"
                          full_slug: "blog/social-media-best-practices"
                          title: "Social Media Best Practices"
                          description: "Learn how to maximize your social media presence"
                          published_at: "2025-01-20T10:00:00Z"
                      total: 15
                    conversation_id: null
                chatOnly:
                  summary: Response without search
                  value:
                    message: "Hello! How can I help you search for content today?"
                    results: null
                    conversation_id: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable (external service error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/test-bedrock:
    get:
      tags:
        - Debug
      summary: Test Bedrock connection
      description: |
        Test endpoint for AWS Bedrock integration.
        Only available when DEBUG=true in environment configuration.
      operationId: testBedrock
      responses:
        '200':
          description: Test completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                  response:
                    type: object
                    description: Bedrock response (on success)
                  error:
                    type: string
                    description: Error message (on error)
        '404':
          description: Debug mode disabled

  /api/test-storyblok:
    get:
      tags:
        - Debug
      summary: Test Storyblok connection
      description: |
        Test endpoint for Storyblok Strata integration.
        Only available when DEBUG=true in environment configuration.
      operationId: testStoryblok
      parameters:
        - name: term
          in: query
          description: Search term to test
          required: false
          schema:
            type: string
            default: test
      responses:
        '200':
          description: Test completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                  results:
                    $ref: '#/components/schemas/SearchResults'
                  error:
                    type: string
        '404':
          description: Debug mode disabled

components:
  schemas:
    HealthCheck:
      type: object
      required:
        - status
        - service
        - version
      properties:
        status:
          type: string
          description: Service health status
          example: healthy
        service:
          type: string
          description: Service name
          example: Storyblok Voice Assistant
        version:
          type: string
          description: API version
          example: 1.0.0

    Message:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [user, assistant]
          description: Message role
        content:
          type: string
          description: Message content

    ConversationRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          description: User's message or query
          example: "Find articles about marketing"
        conversation_history:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Previous conversation messages for context
          default: []
          maxItems: 20

    StoryResult:
      type: object
      required:
        - id
        - name
        - full_slug
      properties:
        id:
          type: integer
          description: Unique story identifier
          example: 12345
        name:
          type: string
          description: Story name
          example: "Marketing Strategy 2025"
        full_slug:
          type: string
          description: Complete URL slug/path
          example: "blog/marketing-strategy-2025"
        title:
          type: string
          nullable: true
          description: Display title extracted from content
          example: "Marketing Strategy 2025"
        description:
          type: string
          nullable: true
          maxLength: 200
          description: Brief description (max 200 characters)
          example: "A comprehensive guide to modern marketing tactics and trends"
        content:
          type: object
          nullable: true
          description: Raw story content object
        created_at:
          type: string
          format: date-time
          nullable: true
          description: ISO 8601 timestamp of creation
          example: "2025-01-01T10:00:00Z"
        published_at:
          type: string
          format: date-time
          nullable: true
          description: ISO 8601 timestamp of publication
          example: "2025-01-15T10:00:00Z"
        first_published_at:
          type: string
          format: date-time
          nullable: true
          description: ISO 8601 timestamp of first publication
          example: "2025-01-15T10:00:00Z"

    SearchResults:
      type: object
      properties:
        stories:
          type: array
          items:
            $ref: '#/components/schemas/StoryResult'
          description: Array of story results
        total:
          type: integer
          description: Total number of results
          example: 15

    ConversationResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Assistant's conversational response
          example: "I found 15 marketing articles. Here are the top results:"
        results:
          allOf:
            - $ref: '#/components/schemas/SearchResults'
          nullable: true
          description: Search results if a search was performed
        conversation_id:
          type: string
          nullable: true
          description: Conversation session ID (reserved for future use)

    ErrorResponse:
      type: object
      required:
        - error
        - status_code
      properties:
        error:
          type: string
          description: Brief error message
          example: "Internal server error"
        detail:
          type: string
          nullable: true
          description: Detailed error information
          example: "Unable to connect to AI service"
        status_code:
          type: integer
          description: HTTP status code
          example: 500

    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: integer
                description: Location of the error
              msg:
                type: string
                description: Error message
              type:
                type: string
                description: Error type