# AI Assistant Rules for this Project

## File Organization Rules

### Documentation Files
**Rule**: All documentation MUST be created in the `ai-output/docs/` folder.

**Current State**: This project does NOT have a separate `docs/` folder. All documentation, whether polished user-facing docs or AI working notes, goes in `ai-output/docs/`.

This includes:
- User guides and tutorials
- API reference documentation
- Setup and installation guides
- Feature documentation
- Change logs and fix summaries
- Debugging logs and status reports
- Implementation notes from AI sessions
- Session summaries and context logs
- Historical tracking of changes
- Any markdown files created during problem-solving

**Exception**: Only `README.md` in the project root is allowed for the main project overview.

**Future Note**: If a `docs/` folder is created in the future, it should be reserved for polished, production-ready documentation for end users, while `ai-output/docs/` would contain working notes and historical artifacts.

### Automated Test Files (Real Tests)
**Rule**: ONLY real automated tests go in the `tests/` folder.

This is for **REAL** test files that are part of the testing infrastructure:
- Python test files using pytest (test_*.py)
- JavaScript/TypeScript test files (*.test.js, *.spec.js, *.test.ts, *.spec.ts)
- Test configuration files (pytest.ini, jest.config.js, vitest.config.js)
- Test fixtures and mock data files
- `__init__.py` for Python test modules

**These are actual automated tests run by test frameworks (pytest, jest, vitest, etc.).**

**Does NOT include:**
- Shell scripts for manual validation
- Ad-hoc verification scripts  
- One-off testing utilities created to verify fixes
- Debug scripts created during troubleshooting

### AI-Generated Validation & Testing Scripts
**Rule**: All AI-generated validation scripts and debugging tools MUST be created in the `ai-output/validation/` folder.

This includes:
- Shell scripts for manual testing and validation (*.sh)
- Quick verification scripts created to test fixes
- Setup checking and verification scripts
- Debug patches (*.patch)
- Model checking utilities
- One-off validation tools created during AI sessions
- Test scripts created to validate specific issues
- Fix scripts created during debugging sessions

**These are AI-generated tools for manual validation, not automated test suite members.**

**Exception**: The main `run.sh` script can remain in the root if it's the primary application launcher.

## Project Structure

```
project-root/
â”œâ”€â”€ README.md              # Main project overview only
â”œâ”€â”€ requirements.txt       # Python dependencies
â”œâ”€â”€ run.sh                # Main application launcher
â”œâ”€â”€ backend/              # Backend application code
â”œâ”€â”€ frontend/             # Frontend application code
â”œâ”€â”€ tests/                # âœ… REAL automated tests only
â”‚   â”œâ”€â”€ test_*.py        # Pytest unit/integration tests
â”‚   â”œâ”€â”€ *.test.js        # Jest/Vitest tests
â”‚   â””â”€â”€ pytest.ini       # Test configuration
â””â”€â”€ ai-output/            # ðŸ¤– All AI-generated artifacts
    â”œâ”€â”€ docs/            # ALL documentation (user docs & working notes)
    â”‚   â”œâ”€â”€ SETUP.md     # Setup guide
    â”‚   â”œâ”€â”€ API.md       # API reference
    â”‚   â”œâ”€â”€ FEATURES.md  # Feature documentation
    â”‚   â”œâ”€â”€ FIX-SUMMARY.md
    â”‚   â”œâ”€â”€ CHANGELOG.md
    â”‚   â””â”€â”€ SESSION-*.md
    â””â”€â”€ validation/      # AI validation scripts & patches
        â”œâ”€â”€ test_*.sh
        â”œâ”€â”€ verify_*.py
        â””â”€â”€ *.patch
```

**Note**: There is NO separate `docs/` folder in this project. All documentation is in `ai-output/docs/`.

## Decision Tree for File Placement

**When creating a documentation file:**
- Is this the main project README?
  â†’ YES: Update `README.md` in root
  â†’ NO: Create in `ai-output/docs/`

**When creating a test/validation file:**
- Is this a real automated test run by pytest/jest/vitest?
  â†’ YES: Create in `tests/`
  â†’ NO: Create in `ai-output/validation/`

**When creating application code:**
- Backend code â†’ `backend/`
- Frontend code â†’ `frontend/`
- Configuration files (`.env`, `requirements.txt`) â†’ root

## Compliance

Following these rules ensures:
- Clean separation between application code and AI artifacts
- All documentation centralized in one location
- Real automated tests separate from validation scripts
- Easy cleanup of AI-generated content when needed
- Professional project structure
